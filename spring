一、spring中的设计模式
1.工厂模式
2.代理模式
3.单例模式
4.装饰器模式
5.策略模式
6.观察者模式

二、SpringBoot中Bean的生命周期:
1.————————SpringBoot开始运行————————
2.Bean的静态方法快
3.Bean的普通方法快
4.Bean的构造方法
5.Bean的setter方法
6.{@linkBeanNameAware}.setBeanName()
7.{@linkBeanFactoryAware}.setBeanFactory()
8.{@linkApplicationContextAware}.setApplicationContext()
9.{@linkBeanPostProcessor}.postProcessBeforeInitialization()
10.{@linkPostConstruct}标注的方法
11.{@linkInitializingBean}.afterPropertiesSet()
12.{@linkBean}.initMethod()
13.{@linkBeanPostProcessor}.postProcessAfterInitialization()
14.————————SpringBoot停止运行————————
15.{@linkPreDestroy}标注的方法
16.{@linkDisposableBean}.destroy()
17.{@linkBean}.destroyMethod()

三、Spring三级缓存：
1.一级缓存，存放完整的 Bean
2.二级缓存，存放提前暴露的Bean，Bean 是不完整的，未完成属性注入和执行 init 方法
3.三级缓存，存放的是 Bean 工厂，主要是生产 Bean，存放到二级缓存中
PS:
  如果 Spring 选择二级缓存来解决循环依赖的话，那么就意味着所有 Bean 都需要在实例化完成之后就立马为其创建代理，
  而 Spring 的设计原则是在 Bean 初始化完成之后才为其创建代理。所以，Spring 选择了三级缓存。

四、Spring事务失效的场景：
1.注解@Transactional配置的方法非public权限修饰；
2.注解@Transactional所在类非Spring容器管理的bean；
3.注解@Transactional所在类中，注解修饰的方法被类内部方法调用；
4.业务代码抛出异常类型非RuntimeException，事务失效；
5.业务代码中存在异常时，使用try…catch…语句块捕获，而catch语句块没有throw new RuntimeException异常;（最难被排查到问题且容易忽略）
6.注解@Transactional中Propagation属性值设置错误即Propagation.NOT_SUPPORTED（一般不会设置此种传播机制）
7.mysql关系型数据库，且存储引擎是MyISAM而非InnoDB，则事务会不起作用(基本开发中不会遇到);

五、事务的传播机制：
1.REQUIRED: 如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。
2.SUPPORTS: 如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。
3.MANDATORY: 如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。
4.REQUIRES_NEW: 创建一个新的事务，如果当前存在事务，则把当前事务挂起。
5.NOT_SUPPORTED: 以非事务方式运行，如果当前存在事务，则把当前事务挂起。
6.NEVER: 以非事务方式运行，如果当前存在事务，则抛出异常。
7.NESTED: 如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于 REQUIRED 。
8.指定方法：通过使用 propagation 属性设置，例如：@Transactional(propagation = Propagation.REQUIRED)

六、springboot自动配置原理:
1.@SpringBootApplication注解
2.@EnableAutoConfiguration注解
3.@Import(AutoConfigurationImportSelector.class)注解中的类
4.类中的方法getCandidateConfigurations
5.META-INF/spring.factories