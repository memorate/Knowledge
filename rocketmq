一、RocketMq与Kafka对比:
                         Kafka                                RocketMq
1.可靠性:        异步刷盘，异步复制/同步复制            异步实时刷盘，同步刷盘，异步复制/同步复制
2.性能:          单机写入TPS约在百万条/秒              单机写入TPS单实例约7万条/秒
3.消息时延:       短轮询，取决于轮询间隔时间            长轮询，时延通常在几毫秒
4.失败重试:       不支持                             支持定时重试，每次重试间隔时间顺延
5.消息顺序:       支持，但是代理宕机会乱序              严格的消息顺序，Broker宕机后会发送失败，但不会乱序
6.定时消息:       不支持                             仅支持定时级别
7.分布式事务消息:  不支持                             支持
8.消息查询:       不支持                             支持根据消息标识查询消息
9.消息堆积能力:    强                                稍弱
10.单机队列数:     超过64个负载明显飙高                单机最高5万个队列，且负载不会发生明显变化
11.开发语言:       Scala                            Java

二、多个Consumer消费同一个Topic: 
1.集群: 使用相同Group ID的消费者属于同一个集群。同一个集群下的消费者消费逻辑必须完全一致（包括Tag的使用）。
2.集群消费: 当使用集群消费模式时，任意一条消息只需要被集群内的任意一个消费者处理即可。
3.广播消费: 当使用广播消费模式时，将每条消息推送给集群内所有注册过的消费者，保证消息至少被每个消费者消费一次。
关键点: 使用 Map 存储 Topic 订阅者，后注册消费者会顶替之前注册的消费者。

三、死信队列:
1.当一条消息消费失败并达到最大重试次数后，若消费依然失败，则会将其发送到死信队列中。
2.死信消息特性:
  a.不会再被消费者正常消费;
  b.有效期与正常消息相同，均为3天，3天后会被自动删除;
3.死信队列特性:
  a.一个死信队列对应一个Group ID，而不是对应单个消费者实例;
  b.如果一个Group ID未产生死信消息，则不会为其创建相应的死信队列;
  c.一个死信队列包含了对应Group ID产生的所有死信消息，不论该消息属于哪个Topic
PS: 可在控制台对死信消息进行查询、导出、重发。

四、负载均衡:
1.生产者: 轮询式，Producer会把第一条消息发送至Queue 0，然后第二条消息发送至Queue 1，以此类推，第八条消息发送至Queue 7，第九条消息又发送至Queue 0，循环往复。
2.消费者:
  a.若 Consumer 实例数量大于 Queue 的数量，则超出 Queue 数量的 Consumer 会处理 0 个 Queue 上的消息(即多余的 Consumer 不工作);
  b.若 Consumer 实例数量等于 Queue 的数量，则每个 Consumer 会处理 1 个 Queue 上的消息;
  c.若 Consumer 实例数量小 于Queue 的数量，则每个 Consumer 会处理多个 Queue 上的消息;