一、应用模式介绍:
1.C/S: Client/Server，即“客户端/服务器”模式。
2.B/S: Browser/Server，即“浏览器/服务器”模式。
3.集群: 同一个业务部署在不同的机器(或同一机器不同端口)。
4.分布式: 一个业务拆分为多个子业务，部署在不同的机器上。
5.微服务: 微服务是一些可独立运行、可协同工作的小的服务。
         微服务的思想是，将一个拥有复杂功能的庞大系统，按照业务功能，拆分成多个相互独立的子系统，这些子系统则被称为“微服务”。
		 各个微服务之间是松耦合的。
PS: C/S与B/S两种模式互补，无法互相取代。
    分布式是微服务的一种表现形式，分布式是部署层面，微服务是设计层面。
    好的架构应该是分布式 + 集群。将业务拆分为多个子业务，每个子业务再进行集群部署。

二、单体应用的缺陷:
1.代码臃肿，应用启动时间长
2.回归测试周期长，修复一个小bug需要对所有关键业务进行回归测试
3.应用容错性差，某个小功能的程序错误可能导致整个应用宕机
4.伸缩困难，性能扩展时只能进行集群部署，浪费计算资源
5.开发协作困难，同一套代码，merge复杂度剧增

三、微服务的缺陷:
1.系统的复杂性增加
2.运维难度增加
3.服务间的部署依赖
4.服务间的通信成本
5.数据一致性

四、CAP 与 BASE:
1.CAP定理（分布式系统下）:
   a.Consistency: 数据一致性，同一数据的多个副本是否实时相同
   b.Availability: 服务可用性，系统提供的服务必须一直处于可用的状态，每次请求都能获取到非错的响应（不保证获取的数据为最新数据）
   c.Partition tolerance: 分区容错性，分布式系统在遇到任何网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务，除非整个网络环境都发生了故障
2.BASE:
   a.Basically Available: 基本可用，一定时间内仍然能够返回一个明确的结果
   b.Soft state: 软状态，允许同一数据的副本存在中间的状态，可以不需要实时一致
   c.Eventually consistent: 最终一致性，经过有限的时间期限后，所有的数据副本保持数据一致性
PS: BASE是对CAP中AP的一个扩展
    Eureka（保证AP），Zookeeper（保证CP）