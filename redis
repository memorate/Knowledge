一、Redis和Memcached对比:
1.Redis数据可以持久化，Memcached数据只存在内存中;
2.Redis有多种数据结构，Memcached只有k-v一种数据结构;
3.Redis是单线程的，Memcached是多线程的;

二、Redis为什么快:
1.操作基本基于内存;
2.数据结构简单;
3.单线程，避免上下文切换和竞争，不存在线程切换的消耗，不存在锁消耗;
4.多路复用型IO;
5.使用自己的RESP通讯协议，自己构建了VM，节约系统调用函数的时间;

三、缓存穿透、缓存击穿、缓存雪崩:
1.缓存穿透: 请求缓存和数据库中都不存在的数据，每次都会请求到数据库;
    解决: 缓存空值、布隆过滤器
2.缓存击穿: 一个热点数据失效后，大量的请求到了数据库;
    解决: 分布式锁，拿到锁的线程更新缓存、或者永不失效
3.缓存雪崩: 大规模热点数据失效，请求到了数据库;
    解决: 集群模式、本地缓存 + 限流 + 降级

四、Redis删除策略:
1.定时删除      2.惰性删除      3.定期删除
PS: 默认为惰性 + 定期

五、Redis淘汰策略:
1.volatile-lru    利用 LRU 算法移除设置过过期时间的key;
2.volatile-ttl    移除即将过期的 key;
3.volatile-random 移除设置过过期时间的随机 key;
4.allkeys-lru     利用 LRU 算法移除任何 key(和 1 相比，删除的 key 包括设置过期时间和不设置过期时间的)。通常使用该方式;
5.allkeys-random  无差别的随机移除;
6.noeviction      不移除任何 key，只是返回一个写错误 ，默认选项，一般不会选用;
默认: noeviction
PS: LRU (Least recently used)   最近最少使用，如果数据最近被访问过，那么将来被访问的几率也更高
    LFU (Least frequently used) 最不经常使用，如果一个数据在最近一段时间内使用次数很少，那么在将来一段时间内被使用的可能性也很小

六、RDB与AOF
1.RDB:
当 Redis 需要做持久化时，Redis 会 fork 一个子进程，子进程将数据写到磁盘上一个临时 RDB 文件中。
当子进程完成写临时文件后，将原来的 RDB 替换掉，这样的好处就是可以 copy-on-write。
2.AOF:
采用日志的形式来记录每个写操作，并追加到文件中。Redis 重启的会根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。

七、Redis实现分布式锁:
可以直接使用 Redisson。
1.加锁:
  加锁时 value 设置为 UUID:ThreadId，因为解锁时需要根据 UUID 和 ThreadId 进行双重判断锁是不是自己加的;
  一定要设置过期时间，防止意外产生死锁;
  a.setnx:
    SETNX key value
  b.setex:
    SETEX key seconds value
2.解锁:
  解锁前要判断锁是否是自己的，不能释放别的线程的锁。
3.看门狗:
  给当前锁续期，采用 netty 的时间轮来实现。
